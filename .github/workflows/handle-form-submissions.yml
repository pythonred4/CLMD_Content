name: Handle Form Submissions

on:
  # Trigger when users submit content through the web form
  repository_dispatch:
    types:
      - form-submission
      - content-submission
  # Also trigger on manual workflow dispatch for testing
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode (creates sample content)'
        required: false
        default: false
        type: boolean

jobs:
  process-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Get submission data
        id: get-data
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual test mode
            echo "content_type=post-single" >> $GITHUB_OUTPUT
            echo "content_title=Test Content Submission" >> $GITHUB_OUTPUT
            echo "content_summary=This is a test submission" >> $GITHUB_OUTPUT
            echo "content_body=# Test Content\n\nThis is test content generated by GitHub Actions workflow." >> $GITHUB_OUTPUT
            echo "test_mode=true" >> $GITHUB_OUTPUT
          else
            # Repository dispatch from form
            echo "content_type=${{ github.event.client_payload.content_type || 'post-single' }}" >> $GITHUB_OUTPUT
            echo "content_title=${{ github.event.client_payload.content_title || 'Content Submission' }}" >> $GITHUB_OUTPUT
            echo "content_summary=${{ github.event.client_payload.content_summary || '' }}" >> $GITHUB_OUTPUT
            echo "content_body=${{ github.event.client_payload.content || '# Content Submission\n\nContent will be added here.' }}" >> $GITHUB_OUTPUT
            echo "test_mode=false" >> $GITHUB_OUTPUT
          fi
          
          echo "📋 Submission data:"
          echo "  Type: ${{ steps.get-data.outputs.content_type }}"
          echo "  Title: ${{ steps.get-data.outputs.content_title }}"
          echo "  Summary: ${{ steps.get-data.outputs.content_summary }}"
          echo "  Test Mode: ${{ steps.get-data.outputs.test_mode }}"
          
      - name: Create pending content folder
        run: |
          mkdir -p "pending-content/${{ steps.get-data.outputs.content_type }}"
          echo "📁 Created pending-content/${{ steps.get-data.outputs.content_type }} folder"
          
      - name: Generate content file
        id: create-file
        run: |
          # Generate unique ID and slug
          UNIQUE_ID=$(openssl rand -hex 4)
          CONTENT_TITLE="${{ steps.get-data.outputs.content_title }}"
          SLUG=$(echo "$CONTENT_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/-\+/-/g' | sed 's/^-\|-$//g')
          TIMESTAMP=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          
          # Create filename
          FILENAME="${SLUG}-${UNIQUE_ID}.md"
          FILEPATH="pending-content/${{ steps.get-data.outputs.content_type }}/${FILENAME}"
          
          # Create YAML front matter
          cat > "$FILEPATH" << EOF
---
uid: ${UNIQUE_ID}
title: "${CONTENT_TITLE}"
slug: "${SLUG}"
alias: ""
published_date: "${TIMESTAMP}"
tags: ""
draft: true
discoverable: true
is_page: $([ "${{ steps.get-data.outputs.content_type }}" = "pages" ] && echo "true" || echo "false")
canonical_url: ""
description: "${{ steps.get-data.outputs.content_summary }}"
image: ""
lang: "vi"
class_name: ""
first_published_at: "${TIMESTAMP}"
hugo_destination: "content/${{ steps.get-data.outputs.content_type == 'video-single' && 'videos' || steps.get-data.outputs.content_type == 'post-single' && 'posts' || steps.get-data.outputs.content_type == 'posts' && 'articles' || 'pages' }}/"
submission_status: "pending"
submitted_at: "${TIMESTAMP}"
source: "web-form"
---

${{ steps.get-data.outputs.content_body }}
EOF
          
          echo "📄 Created content file: $FILEPATH"
          echo "file_path=$FILEPATH" >> $GITHUB_OUTPUT
          echo "unique_id=$UNIQUE_ID" >> $GITHUB_OUTPUT
          echo "slug=$SLUG" >> $GITHUB_OUTPUT
          
      - name: Commit and push pending content
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add pending-content/
          git commit -m "Add pending content: ${{ steps.get-data.outputs.content_title }} (${{ steps.get-data.outputs.content_type }})"
          git push origin main
          
          echo "✅ Pushed pending content to main branch"
          
      - name: Trigger content processing workflow
        id: trigger-workflow
        run: |
          # The push to main branch will automatically trigger the create-content-branch workflow
          # because it's configured to trigger on push to main with pending-content/** path
          echo "🔄 Content processing workflow will be triggered automatically"
          echo "📋 Check the Actions tab for 'Create Content Update Branch and PR' workflow"
          
      - name: Output results
        run: |
          echo "🎉 Form submission processed successfully!"
          echo "📁 Content file created: ${{ steps.create-file.outputs.file_path }}"
          echo "🆔 Unique ID: ${{ steps.create-file.outputs.unique_id }}"
          echo "🔗 Slug: ${{ steps.create-file.outputs.slug }}"
          echo "🌿 Branch creation workflow will run automatically"
          echo "📋 Check Actions tab for progress"
          
          if [ "${{ steps.get-data.outputs.test_mode }}" = "true" ]; then
            echo "🧪 Test mode: This was a test submission"
          else
            echo "📝 Production mode: Real content submitted"
          fi