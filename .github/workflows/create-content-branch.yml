name: Create Content Update Branch and PR

on:
  workflow_dispatch:
    inputs:
      content_type:
        description: 'Content type to update'
        required: true
        default: 'post-single'
        type: choice
        options:
          - video-single
          - post-single
          - posts
          - pages
      content_title:
        description: 'Title of the content'
        required: true
        default: 'New Content Submission'
        type: string
      content_summary:
        description: 'Summary of the content (optional)'
        required: false
        type: string
      test_mode:
        description: 'Test mode (creates test content)'
        required: false
        default: false
        type: boolean
  # Add webhook trigger for form submissions
  repository_dispatch:
    types:
      - create-content-branch
      - content-submission
      - form-submission
  # Trigger when pending content is added
  push:
    branches:
      - main
    paths:
      - 'pending-content/**'

jobs:
  create-content-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate branch name
        id: branch-name
        run: |
          # Get current date and time in dd-mm-yyyy-hh-mm-ss format
          BRANCH_NAME="updatecontent-$(date +'%d-%m-%Y-%H-%M-%S')"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Generated branch name: $BRANCH_NAME"

      - name: Create and switch to new branch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create and switch to new branch
          git checkout -b ${{ steps.branch-name.outputs.branch_name }}
          
          echo "Created and switched to branch: ${{ steps.branch-name.outputs.branch_name }}"

      - name: Check for pending content
        id: check-pending
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual workflow dispatch - create test content
            CONTENT_TYPE="${{ github.event.inputs.content_type }}"
            CONTENT_TITLE="${{ github.event.inputs.content_title }}"
            CONTENT_SUMMARY="${{ github.event.inputs.content_summary }}"
            TEST_MODE="${{ github.event.inputs.test_mode }}"
            HAS_PENDING=false
          else
            # Check for pending content files
            if [ -d "pending-content" ]; then
              PENDING_FILES=$(find pending-content -name "*.md" -type f | head -1)
              if [ -n "$PENDING_FILES" ]; then
                echo "📁 Found pending content: $PENDING_FILES"
                HAS_PENDING=true
                
                # Extract content type from path
                CONTENT_TYPE=$(echo "$PENDING_FILES" | sed 's|pending-content/\([^/]*\)/.*|\1|')
                
                # Read content from file
                CONTENT_TITLE=$(grep '^title:' "$PENDING_FILES" | sed 's/^title: "\(.*\)"/\1/')
                CONTENT_SUMMARY=$(grep '^description:' "$PENDING_FILES" | sed 's/^description: "\(.*\)"/\1/')
                TEST_MODE=false
                
                echo "📋 Extracted data:"
                echo "  Type: $CONTENT_TYPE"
                echo "  Title: $CONTENT_TITLE"
                echo "  Summary: $CONTENT_SUMMARY"
              else
                echo "❌ No pending content files found"
                HAS_PENDING=false
                CONTENT_TYPE="post-single"
                CONTENT_TITLE="No Content"
                CONTENT_SUMMARY=""
                TEST_MODE=false
              fi
            else
              echo "❌ No pending-content directory found"
              HAS_PENDING=false
              CONTENT_TYPE="post-single"
              CONTENT_TITLE="No Content"
              CONTENT_SUMMARY=""
              TEST_MODE=false
            fi
          fi
          
          echo "content_type=$CONTENT_TYPE" >> $GITHUB_OUTPUT
          echo "content_title=$CONTENT_TITLE" >> $GITHUB_OUTPUT
          echo "content_summary=$CONTENT_SUMMARY" >> $GITHUB_OUTPUT
          echo "test_mode=$TEST_MODE" >> $GITHUB_OUTPUT
          echo "has_pending=$HAS_PENDING" >> $GITHUB_OUTPUT
          
          # Generate unique ID
          UNIQUE_ID=$(openssl rand -hex 4)
          
          # Determine target folder based on content type
          case $CONTENT_TYPE in
            "video-single")
              TARGET_FOLDER="Video-Single"
              HUGO_DESTINATION="content/videos/"
              ;;
            "post-single")
              TARGET_FOLDER="Post-Single"
              HUGO_DESTINATION="content/posts/"
              ;;
            "posts")
              TARGET_FOLDER="posts"
              HUGO_DESTINATION="content/articles/"
              ;;
            "pages")
              TARGET_FOLDER="pages"
              HUGO_DESTINATION="content/pages/"
              ;;
            *)
              TARGET_FOLDER="posts"
              HUGO_DESTINATION="content/articles/"
              ;;
          esac
          
          # Generate slug from title
          SLUG=$(echo "$CONTENT_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/-\+/-/g' | sed 's/^-\|-$//g')
          FILENAME="${SLUG}-${UNIQUE_ID}.md"
          
          # Create target folder if it doesn't exist
          mkdir -p "$TARGET_FOLDER"
          
          if [ "${{ steps.check-pending.outputs.has_pending }}" = "true" ]; then
            # Process pending content file
            PENDING_FILE=$(find pending-content -name "*.md" -type f | head -1)
            echo "📁 Processing pending content: $PENDING_FILE"
            
            # Copy content from pending file to final location
            cp "$PENDING_FILE" "$TARGET_FOLDER/$FILENAME"
            
            # Update the file with new metadata
            sed -i "s/uid: .*/uid: $UNIQUE_ID/" "$TARGET_FOLDER/$FILENAME"
            sed -i "s/slug: .*/slug: \"$SLUG\"/" "$TARGET_FOLDER/$FILENAME"
            sed -i "s/hugo_destination: .*/hugo_destination: \"$HUGO_DESTINATION\"/" "$TARGET_FOLDER/$FILENAME"
            sed -i "s/submission_status: .*/submission_status: \"processed\"/" "$TARGET_FOLDER/$FILENAME"
            
            echo "✅ Content moved from pending to final location"
          else
            # Create new content file (for manual workflow dispatch)
            echo "📝 Creating new content file..."
            
            # Create YAML front matter
            echo "---" > "$TARGET_FOLDER/$FILENAME"
            echo "uid: $UNIQUE_ID" >> "$TARGET_FOLDER/$FILENAME"
            echo "title: \"$CONTENT_TITLE\"" >> "$TARGET_FOLDER/$FILENAME"
            echo "slug: \"$SLUG\"" >> "$TARGET_FOLDER/$FILENAME"
            echo "alias: \"\"" >> "$TARGET_FOLDER/$FILENAME"
            echo "published_date: \"$(date -u +'%Y-%m-%dT%H:%M:%SZ')\"" >> "$TARGET_FOLDER/$FILENAME"
            echo "tags: \"\"" >> "$TARGET_FOLDER/$FILENAME"
            echo "draft: true" >> "$TARGET_FOLDER/$FILENAME"
            echo "discoverable: true" >> "$TARGET_FOLDER/$FILENAME"
            
            # Set is_page based on content type
            if [ "$CONTENT_TYPE" = "pages" ]; then
              echo "is_page: true" >> "$TARGET_FOLDER/$FILENAME"
            else
              echo "is_page: false" >> "$TARGET_FOLDER/$FILENAME"
            fi
            
            echo "canonical_url: \"\"" >> "$TARGET_FOLDER/$FILENAME"
            echo "description: \"$CONTENT_SUMMARY\"" >> "$TARGET_FOLDER/$FILENAME"
            echo "image: \"\"" >> "$TARGET_FOLDER/$FILENAME"
            echo "lang: \"vi\"" >> "$TARGET_FOLDER/$FILENAME"
            echo "class_name: \"\"" >> "$TARGET_FOLDER/$FILENAME"
            echo "first_published_at: \"$(date -u +'%Y-%m-%dT%H:%M:%SZ')\"" >> "$TARGET_FOLDER/$FILENAME"
            echo "hugo_destination: \"$HUGO_DESTINATION\"" >> "$TARGET_FOLDER/$FILENAME"
            echo "---" >> "$TARGET_FOLDER/$FILENAME"
            echo "" >> "$TARGET_FOLDER/$FILENAME"
            
            # Add content based on test mode
            if [ "$TEST_MODE" = "true" ]; then
              echo "# Test Content: $CONTENT_TITLE" >> "$TARGET_FOLDER/$FILENAME"
              echo "" >> "$TARGET_FOLDER/$FILENAME"
              echo "## Summary" >> "$TARGET_FOLDER/$FILENAME"
              echo "$CONTENT_SUMMARY" >> "$TARGET_FOLDER/$FILENAME"
              echo "" >> "$TARGET_FOLDER/$FILENAME"
              echo "## Content" >> "$TARGET_FOLDER/$FILENAME"
              echo "This is test content generated by GitHub Actions workflow." >> "$TARGET_FOLDER/$FILENAME"
              echo "" >> "$TARGET_FOLDER/$FILENAME"
              echo "## Generated Info" >> "$TARGET_FOLDER/$FILENAME"
              echo "- **Type**: $CONTENT_TYPE" >> "$TARGET_FOLDER/$FILENAME"
              echo "- **Target Folder**: $TARGET_FOLDER" >> "$TARGET_FOLDER/$FILENAME"
              echo "- **Hugo Destination**: $HUGO_DESTINATION" >> "$TARGET_FOLDER/$FILENAME"
              echo "- **Generated At**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> "$TARGET_FOLDER/$FILENAME"
              echo "- **Branch**: ${{ steps.branch-name.outputs.branch_name }}" >> "$TARGET_FOLDER/$FILENAME"
              echo "" >> "$TARGET_FOLDER/$FILENAME"
              echo "## Test Markdown Features" >> "$TARGET_FOLDER/$FILENAME"
              echo "- **Bold text**" >> "$TARGET_FOLDER/$FILENAME"
              echo "- *Italic text*" >> "$TARGET_FOLDER/$FILENAME"
              echo "- \`Inline code\`" >> "$TARGET_FOLDER/$FILENAME"
              echo "- [Link](https://example.com)" >> "$TARGET_FOLDER/$FILENAME"
              echo "" >> "$TARGET_FOLDER/$FILENAME"
              echo "\`\`\`python" >> "$TARGET_FOLDER/$FILENAME"
              echo "# Code block example" >> "$TARGET_FOLDER/$FILENAME"
              echo "print('Hello, World!')" >> "$TARGET_FOLDER/$FILENAME"
              echo "\`\`\`" >> "$TARGET_FOLDER/$FILENAME"
              echo "" >> "$TARGET_FOLDER/$FILENAME"
              echo "---" >> "$TARGET_FOLDER/$FILENAME"
              echo "*This content was automatically generated for testing purposes.*" >> "$TARGET_FOLDER/$FILENAME"
            else
              echo "# $CONTENT_TITLE" >> "$TARGET_FOLDER/$FILENAME"
              echo "" >> "$TARGET_FOLDER/$FILENAME"
              echo "## Summary" >> "$TARGET_FOLDER/$FILENAME"
              echo "$CONTENT_SUMMARY" >> "$TARGET_FOLDER/$FILENAME"
              echo "" >> "$TARGET_FOLDER/$FILENAME"
              echo "## Content" >> "$TARGET_FOLDER/$FILENAME"
              echo "Content will be added here by the user." >> "$TARGET_FOLDER/$FILENAME"
              echo "" >> "$TARGET_FOLDER/$FILENAME"
              echo "## Metadata" >> "$TARGET_FOLDER/$FILENAME"
              echo "- **Type**: $CONTENT_TYPE" >> "$TARGET_FOLDER/$FILENAME"
              echo "- **Target Folder**: $TARGET_FOLDER" >> "$TARGET_FOLDER/$FILENAME"
              echo "- **Hugo Destination**: $HUGO_DESTINATION" >> "$TARGET_FOLDER/$FILENAME"
              echo "- **Generated At**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> "$TARGET_FOLDER/$FILENAME"
              echo "- **Branch**: ${{ steps.branch-name.outputs.branch_name }}" >> "$TARGET_FOLDER/$FILENAME"
              echo "" >> "$TARGET_FOLDER/$FILENAME"
              echo "---" >> "$TARGET_FOLDER/$FILENAME"
              echo "*This is a content template. Please add your content above.*" >> "$TARGET_FOLDER/$FILENAME"
            fi
          fi
          
          echo "Created content file: $TARGET_FOLDER/$FILENAME"
          echo "file_path=$TARGET_FOLDER/$FILENAME" >> $GITHUB_OUTPUT
          echo "content_type=$CONTENT_TYPE" >> $GITHUB_OUTPUT
          echo "target_folder=$TARGET_FOLDER" >> $GITHUB_OUTPUT
          echo "hugo_destination=$HUGO_DESTINATION" >> $GITHUB_OUTPUT
          
          # Clean up pending content if it was processed
          if [ "${{ steps.check-pending.outputs.has_pending }}" = "true" ]; then
            echo "🧹 Cleaning up pending content..."
            git rm -r pending-content/ || echo "No pending content to remove"
            git commit -m "Cleanup processed pending content" || echo "No changes to commit"
            echo "✅ Pending content cleaned up"
          fi

      - name: Commit and push changes
        run: |
          git add .
          # Get content title and type for commit message
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            COMMIT_TITLE="${{ github.event.inputs.content_title }}"
            COMMIT_TYPE="${{ github.event.inputs.content_type }}"
          else
            COMMIT_TITLE="${{ github.event.client_payload.content_title || 'Content Submission' }}"
            COMMIT_TYPE="${{ github.event.client_payload.content_type || 'post-single' }}"
          fi
          
          git commit -m "Add content: $COMMIT_TITLE ($COMMIT_TYPE)"
          git push origin ${{ steps.branch-name.outputs.branch_name }}
          
          echo "Pushed changes to branch: ${{ steps.branch-name.outputs.branch_name }}"

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.branch-name.outputs.branch_name }}
          title: "Content Update: ${{ github.event.inputs.content_title || github.event.client_payload.content_title || 'Content Submission' }}"
          body: |
            ## 📝 Content Update
            
            **Content Type:** ${{ github.event.inputs.content_type || github.event.client_payload.content_type || 'post-single' }}
            **Title:** ${{ github.event.inputs.content_title || github.event.client_payload.content_title || 'Content Submission' }}
            **Summary:** ${{ github.event.inputs.content_summary || github.event.client_payload.content_summary || 'No summary provided' }}
            **Target Folder:** ${{ steps.create-content.outputs.target_folder }}
            **Hugo Destination:** ${{ steps.create-content.outputs.hugo_destination }}
            
            ## 📁 Files Added
            
            - **${{ steps.create-content.outputs.file_path }}**
            
            ## 🔄 Next Steps
            
            1. **Review the content** in the file above
            2. **Edit if needed** - you can modify the content directly in this PR
            3. **Add your actual content** to replace the template
            4. **Test the content** to ensure it's correct
            5. **Approve and merge** when ready
            
            ## 📋 Content Information
            
            - **Generated At:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')
            - **Branch:** ${{ steps.branch-name.outputs.branch_name }}
            - **Workflow:** ${{ github.workflow }}
            - **Run ID:** ${{ github.run_id }}
            
            ## 🚀 After Merge
            
            Once this PR is merged:
            - Content will be available in the main branch
            - The `dispatch-update.yml` workflow will trigger
            - Content will be synced to the Hugo repository
            - Website will be updated with new content
            
            ---
            
            *This PR was automatically created by GitHub Actions workflow.*
          commit-message: "Add content: ${{ github.event.inputs.content_title || github.event.client_payload.content_title || 'Content Submission' }}"
          delete-branch: false
          base: main

      - name: Output results
        run: |
          echo "✅ Content update branch created successfully!"
          echo "🌿 Branch: ${{ steps.branch-name.outputs.branch_name }}"
          echo "📁 File: ${{ steps.create-content.outputs.file_path }}"
          echo "🔗 Pull Request: https://github.com/${{ github.repository }}/pull/${{ steps.create-pr.outputs.pull-request-number }}"
          echo "📝 Content Type: ${{ steps.create-content.outputs.content_type }}"
          echo "🎯 Hugo Destination: ${{ steps.create-content.outputs.hugo_destination }}"
          
          # Check test mode from either event type
          if [ "${{ github.event.inputs.test_mode }}" = "true" ] || [ "${{ github.event.client_payload.test_mode }}" = "true" ]; then
            echo "🧪 Test Mode: Enabled - This is test content"
          else
            echo "📋 Production Mode: Ready for real content"
          fi

      - name: Comment on PR
        if: steps.create-pr.outputs.pull-request-number
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.create-pr.outputs.pull-request-number }},
              body: `## 🎉 Content Update Branch Created!
              
              **Branch:** \`${{ steps.branch-name.outputs.branch_name }}\`
              **Content Type:** ${{ steps.create-content.outputs.content_type }}
              **File:** ${{ steps.create-content.outputs.file_path }}
              
              ### 📋 What to do next:
              
              1. **Review the generated content** in the file above
              2. **Edit the content** if needed (you can edit directly in this PR)
              3. **Add your actual content** to replace the template
              4. **Test and verify** everything looks correct
              5. **Approve and merge** when ready
              
              ### 🔄 After merging:
              
              - Content will be available in the main branch
              - Hugo sync workflow will automatically trigger
              - Website will be updated with new content
              
              ---
              
              *This comment was automatically added by the workflow.*`
            });