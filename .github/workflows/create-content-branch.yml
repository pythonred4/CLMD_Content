name: Create Content Update Branch and PR

on:
  workflow_dispatch:
    inputs:
      content_type:
        description: 'Content type to update'
        required: true
        default: 'post-single'
        type: choice
        options:
          - video-single
          - post-single
          - posts
          - pages
      content_title:
        description: 'Title of the content'
        required: true
        default: 'New Content Submission'
        type: string
      content_summary:
        description: 'Summary of the content (optional)'
        required: false
        type: string
      test_mode:
        description: 'Test mode (creates test content)'
        required: false
        default: false
        type: boolean

jobs:
  create-content-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate branch name
        id: branch-name
        run: |
          # Get current date and time in dd-mm-yyyy-hh-mm-ss format
          BRANCH_NAME="updatecontent-$(date +'%d-%m-%Y-%H-%M-%S')"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Generated branch name: $BRANCH_NAME"

      - name: Create and switch to new branch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create and switch to new branch
          git checkout -b ${{ steps.branch-name.outputs.branch_name }}
          
          echo "Created and switched to branch: ${{ steps.branch-name.outputs.branch_name }}"

      - name: Create content file
        id: create-content
        run: |
          # Get inputs
          CONTENT_TYPE="${{ github.event.inputs.content_type }}"
          CONTENT_TITLE="${{ github.event.inputs.content_title }}"
          CONTENT_SUMMARY="${{ github.event.inputs.content_summary }}"
          TEST_MODE="${{ github.event.inputs.test_mode }}"
          
          # Generate unique ID
          UNIQUE_ID=$(openssl rand -hex 4)
          
          # Determine target folder based on content type
          case $CONTENT_TYPE in
            "video-single")
              TARGET_FOLDER="Video-Single"
              HUGO_DESTINATION="content/videos/"
              ;;
            "post-single")
              TARGET_FOLDER="Post-Single"
              HUGO_DESTINATION="content/posts/"
              ;;
            "posts")
              TARGET_FOLDER="posts"
              HUGO_DESTINATION="content/articles/"
              ;;
            "pages")
              TARGET_FOLDER="pages"
              HUGO_DESTINATION="content/pages/"
              ;;
            *)
              TARGET_FOLDER="posts"
              HUGO_DESTINATION="content/articles/"
              ;;
          esac
          
          # Generate slug from title
          SLUG=$(echo "$CONTENT_TITLE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/-\+/-/g' | sed 's/^-\|-$//g')
          FILENAME="${SLUG}-${UNIQUE_ID}.md"
          
          # Create target folder if it doesn't exist
          mkdir -p "$TARGET_FOLDER"
          
          # Generate content based on test mode
          if [ "$TEST_MODE" = "true" ]; then
            CONTENT="# Test Content: $CONTENT_TITLE

## Summary
$CONTENT_SUMMARY

## Content
This is test content generated by GitHub Actions workflow.

## Generated Info
- **Type**: $CONTENT_TYPE
- **Target Folder**: $TARGET_FOLDER
- **Hugo Destination**: $HUGO_DESTINATION
- **Generated At**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
- **Branch**: ${{ steps.branch-name.outputs.branch_name }}

## Test Markdown Features
- **Bold text**
- *Italic text*
- \`Inline code\`
- [Link](https://example.com)

\`\`\`python
# Code block example
print('Hello, World!')
\`\`\`

---
*This content was automatically generated for testing purposes.*"
          else
            CONTENT="# $CONTENT_TITLE

## Summary
$CONTENT_SUMMARY

## Content
Content will be added here by the user.

## Metadata
- **Type**: $CONTENT_TYPE
- **Target Folder**: $TARGET_FOLDER
- **Hugo Destination**: $HUGO_DESTINATION
- **Generated At**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
- **Branch**: ${{ steps.branch-name.outputs.branch_name }}

---
*This is a content template. Please add your content above.*"
          fi
          
          # Create YAML front matter
          FRONT_MATTER="---
uid: $UNIQUE_ID
title: \"$CONTENT_TITLE\"
slug: \"$SLUG\"
alias: \"\"
published_date: \"$(date -u +'%Y-%m-%dT%H:%M:%SZ')\"
tags: \"\"
draft: true
discoverable: true
is_page: $([ "$CONTENT_TYPE" = "pages" ] && echo "true" || echo "false")
canonical_url: \"\"
description: \"$CONTENT_SUMMARY\"
image: \"\"
lang: \"vi\"
class_name: \"\"
first_published_at: \"$(date -u +'%Y-%m-%dT%H:%M:%SZ')\"
hugo_destination: \"$HUGO_DESTINATION\"
---"
          
          # Combine front matter and content
          FULL_CONTENT="$FRONT_MATTER

$CONTENT"
          
          # Write to file
          echo "$FULL_CONTENT" > "$TARGET_FOLDER/$FILENAME"
          
          echo "Created content file: $TARGET_FOLDER/$FILENAME"
          echo "file_path=$TARGET_FOLDER/$FILENAME" >> $GITHUB_OUTPUT
          echo "content_type=$CONTENT_TYPE" >> $GITHUB_OUTPUT
          echo "target_folder=$TARGET_FOLDER" >> $GITHUB_OUTPUT
          echo "hugo_destination=$HUGO_DESTINATION" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        run: |
          git add .
          git commit -m "Add content: ${{ github.event.inputs.content_title }} (${{ github.event.inputs.content_type }})"
          git push origin ${{ steps.branch-name.outputs.branch_name }}
          
          echo "Pushed changes to branch: ${{ steps.branch-name.outputs.branch_name }}"

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.branch-name.outputs.branch_name }}
          title: "Content Update: ${{ github.event.inputs.content_title }}"
          body: |
            ## 📝 Content Update
            
            **Content Type:** ${{ github.event.inputs.content_type }}
            **Title:** ${{ github.event.inputs.content_title }}
            **Summary:** ${{ github.event.inputs.content_summary || 'No summary provided' }}
            **Target Folder:** ${{ steps.create-content.outputs.target_folder }}
            **Hugo Destination:** ${{ steps.create-content.outputs.hugo_destination }}
            
            ## 📁 Files Added
            
            - **${{ steps.create-content.outputs.file_path }}**
            
            ## 🔄 Next Steps
            
            1. **Review the content** in the file above
            2. **Edit if needed** - you can modify the content directly in this PR
            3. **Add your actual content** to replace the template
            4. **Test the content** to ensure it's correct
            5. **Approve and merge** when ready
            
            ## 📋 Content Information
            
            - **Generated At:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')
            - **Branch:** ${{ steps.branch-name.outputs.branch_name }}
            - **Workflow:** ${{ github.workflow }}
            - **Run ID:** ${{ github.run_id }}
            
            ## 🚀 After Merge
            
            Once this PR is merged:
            - Content will be available in the main branch
            - The `dispatch-update.yml` workflow will trigger
            - Content will be synced to the Hugo repository
            - Website will be updated with new content
            
            ---
            
            *This PR was automatically created by GitHub Actions workflow.*
          commit-message: "Add content: ${{ github.event.inputs.content_title }}"
          delete-branch: false
          base: main

      - name: Output results
        run: |
          echo "✅ Content update branch created successfully!"
          echo "🌿 Branch: ${{ steps.branch-name.outputs.branch_name }}"
          echo "📁 File: ${{ steps.create-content.outputs.file_path }}"
          echo "🔗 Pull Request: https://github.com/${{ github.repository }}/pull/${{ steps.create-pr.outputs.pull-request-number }}"
          echo "📝 Content Type: ${{ steps.create-content.outputs.content_type }}"
          echo "🎯 Hugo Destination: ${{ steps.create-content.outputs.hugo_destination }}"
          
          if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
            echo "🧪 Test Mode: Enabled - This is test content"
          else
            echo "📋 Production Mode: Ready for real content"
          fi

      - name: Comment on PR
        if: steps.create-pr.outputs.pull-request-number
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ steps.create-pr.outputs.pull-request-number }}
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.create-pr.outputs.pull-request-number }},
              body: `## 🎉 Content Update Branch Created!
              
              **Branch:** \`${{ steps.branch-name.outputs.branch_name }}\`
              **Content Type:** ${{ steps.create-content.outputs.content_type }}
              **File:** ${{ steps.create-content.outputs.file_path }}
              
              ### 📋 What to do next:
              
              1. **Review the generated content** in the file above
              2. **Edit the content** if needed (you can edit directly in this PR)
              3. **Add your actual content** to replace the template
              4. **Test and verify** everything looks correct
              5. **Approve and merge** when ready
              
              ### 🔄 After merging:
              
              - Content will be available in the main branch
              - Hugo sync workflow will automatically trigger
              - Website will be updated with new content
              
              ---
              
              *This comment was automatically added by the workflow.*`
            });